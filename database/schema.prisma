// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom 

model DiscordAccount {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  discordId   String       @unique
  avatarUrl   String?
  username    String
  messages    Message[]
  citizenship Citizenship?
}

model Citizenship {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  account   DiscordAccount @relation(fields: [accountId], references: [id])
  accountId String         @unique @db.ObjectId

  discordId         String   @unique
  avatarUrl         String?
  username          String
  previousUsernames String[]

  location String?
  pronouns String?
  aboutMe  String?
}

model Signup {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  limit    Int?
  players  String[]
  backups  String[]
  isLocked Boolean  @default(false)
}

// Roles and Setups

model Role {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  otherNames   String[]
  alignment    String
  abilities    String
  winCondition String
  iconUrl      String?
  flavourText  String?
  roleColour   String?
  wikiUrl      String?
}

// Archive
model Game {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  channels Channel[]
  gameTag  String    @unique
}

model Channel {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String? @db.ObjectId

  guildId    String
  channelId  String    @unique
  name       String
  isThread   Boolean   @default(false)
  archivedAt DateTime? @default(now())

  messages Message[]
  thread   Thread[]
}

model Thread {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])
  channelId String  @db.ObjectId
  messageId String  @db.ObjectId
}

model Message {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String  @db.ObjectId

  messageId    String    @unique
  guildId      String
  createdAt    DateTime
  editedAt     DateTime?
  cleanContent String?
  rawContent   String?
  threads      Thread[]
  pinned       Boolean   @default(false)

  repliedTo String?

  author   DiscordAccount @relation(fields: [authorId], references: [id])
  authorId String         @db.ObjectId
}
